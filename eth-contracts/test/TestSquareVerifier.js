// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const SquareVerifier = artifacts.require('Verifier');

const NUM_PROOFS = 5;

contract('Test SquareVerifier', accounts => {
    describe('test proof', function () {
        beforeEach(async function () {
            this.contract = await SquareVerifier.new({from: accounts[0]});
        });

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps

    for(let i = 1; i <= NUM_PROOFS; i++) {
        const proof = require(`./proofs/proof_${i}`);
        it(`correct proof of ${i}*${i} == ${i*i}`, async function () {
            assert.equal(await this.contract.verifyTx(proof.proof.a, proof.proof.b, proof.proof.c, proof.inputs), true);
        });
    }
    
// Test verification with incorrect proof

		it('incorrect proof due to inputs[0]', async function () {
            const proof = require(`./proofs/proof_1`);
			assert.equal(await this.contract.verifyTx(proof.proof.a, proof.proof.b, proof.proof.c, ["0x5", proof.inputs[1]]), false);
        });

        it('incorrect proof due to inputs[1]', async function () {
            const proof = require(`./proofs/proof_1`);
			assert.equal(await this.contract.verifyTx(proof.proof.a, proof.proof.b, proof.proof.c, [proof.inputs[0], "0x0"]), false);
        });
	});
});